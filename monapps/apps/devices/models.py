from django.db import models

from apps.assets.models import Asset
from common.abstract_classes import PublishingOnSaveModel
from common.constants import HealthGrades


class Device(PublishingOnSaveModel):
    """
    Represents a digital device that collects and transmits data (a LoRa node, a PLC, etc).
    Every device has one or several datastreams (temperature 1, pressure 5, etc).
    In the case of a "device" the "health" is an aggregated parameter that combines the own
    state and the "health" values of all the datafeeds attached to this device.
    """

    class Meta:
        db_table = "devices"
        indexes = [  # FIXME : is really needed?
            models.Index(fields=["dev_ui"], name="dev_ui_idx"),
        ]

    published_fields = {"health"}

    name = models.CharField(max_length=200)  # for instance, "Diagnostic kit TWIN TEMP 14763"

    dev_ui = models.CharField(max_length=50, unique=True)  # for LoRaWAN nodes it will be their devEUI,
    # for other devices can be generated by means of uuid or any other tool

    description = models.TextField(max_length=1000, blank=True)
    characteristics = models.JSONField(default=dict, blank=True)  # like {"power": 25, "weight": 43.2, ...}

    errors = models.JSONField(default=dict, blank=True)
    warnings = models.JSONField(default=dict, blank=True)

    health = models.IntegerField(
        default=HealthGrades.UNDEFINED, choices=HealthGrades.choices
        )  # aggregated health
    chld_health = models.IntegerField(
        default=HealthGrades.UNDEFINED, choices=HealthGrades.choices
    )  # health from children
    msg_health = models.IntegerField(
        default=HealthGrades.UNDEFINED, choices=HealthGrades.choices
    )  # health derived from errors/warnings

    next_upd_ts = models.BigIntegerField(default=0)  # 0 will initiate update right after a device creation
    parent = models.ForeignKey(
        Asset, on_delete=models.SET_NULL, null=True, blank=True, related_name="devices", related_query_name="device"
    )

    def __str__(self):
        return f"Device {self.pk} {self.name}"
